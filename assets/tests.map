{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","faith-promise-fire-tv-app/tests/app.lint-test.js","faith-promise-fire-tv-app/tests/helpers/ember-keyboard/register-test-helpers.js","faith-promise-fire-tv-app/tests/integration/components/app-header/component-test.js","faith-promise-fire-tv-app/tests/integration/components/home-screen/component-test.js","faith-promise-fire-tv-app/tests/integration/components/live-stream-button/component-test.js","faith-promise-fire-tv-app/tests/integration/components/series-carousel/component-test.js","faith-promise-fire-tv-app/tests/integration/components/series-screen/component-test.js","faith-promise-fire-tv-app/tests/integration/components/series-screen/episode/component-test.js","faith-promise-fire-tv-app/tests/integration/components/thumbnail-image/component-test.js","faith-promise-fire-tv-app/tests/integration/components/video-player/component-test.js","faith-promise-fire-tv-app/tests/integration/components/video-player/info-display/component-test.js","faith-promise-fire-tv-app/tests/integration/components/video-player/next-video-countdown/component-test.js","faith-promise-fire-tv-app/tests/integration/components/video-player/video/component-test.js","faith-promise-fire-tv-app/tests/integration/helpers/add-test.js","faith-promise-fire-tv-app/tests/test-helper.js","faith-promise-fire-tv-app/tests/tests.lint-test.js","faith-promise-fire-tv-app/tests/unit/home-screen/service-test.js","faith-promise-fire-tv-app/tests/unit/index/controller-test.js","faith-promise-fire-tv-app/tests/unit/index/route-test.js","faith-promise-fire-tv-app/tests/unit/initializers/array-next-item-test.js","faith-promise-fire-tv-app/tests/unit/play/live/route-test.js","faith-promise-fire-tv-app/tests/unit/play/route-test.js","faith-promise-fire-tv-app/tests/unit/play/series/episode/route-test.js","faith-promise-fire-tv-app/tests/unit/play/series/route-test.js","faith-promise-fire-tv-app/tests/unit/series/route-test.js","faith-promise-fire-tv-app/tests/unit/shoveler/service-test.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('faith-promise-fire-tv-app/tests/app.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('application/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'application/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/app-header/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/app-header/component.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/home-screen/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/home-screen/component.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/live-stream-button/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/live-stream-button/component.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/series-carousel/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/series-carousel/component.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/series-screen/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/series-screen/component.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/series-screen/episode/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/series-screen/episode/component.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/thumbnail-image/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/thumbnail-image/component.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/video-player/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/video-player/component.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/video-player/info-display/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/video-player/info-display/component.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/video-player/next-video-countdown/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/video-player/next-video-countdown/component.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/video-player/video/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/video-player/video/component.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/add.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/add.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('home-screen/service.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'home-screen/service.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('index/controller.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'index/controller.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('index/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'index/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('initializers/object-next-item.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'initializers/object-next-item.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('play/live/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'play/live/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('play/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'play/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('play/series/episode/controller.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'play/series/episode/controller.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('play/series/episode/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'play/series/episode/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('play/series/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'play/series/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('series/controller.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'series/controller.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('series/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'series/route.js should pass ESLint\\n\\n');\n  });\n});","define('faith-promise-fire-tv-app/tests/helpers/ember-keyboard/register-test-helpers', ['exports', 'ember-keyboard', 'ember-keyboard/fixtures/modifiers-array', 'ember-keyboard/fixtures/mouse-buttons-array', 'ember-keyboard/utils/get-cmd-key'], function (exports, _emberKeyboard, _modifiersArray, _mouseButtonsArray, _getCmdKey) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  exports.default = function () {\n    Ember.Test.registerAsyncHelper('keyDown', function (app, attributes, element) {\n      return keyEvent(app, attributes, 'keydown', element);\n    });\n\n    Ember.Test.registerAsyncHelper('keyUp', function (app, attributes, element) {\n      return keyEvent(app, attributes, 'keyup', element);\n    });\n\n    Ember.Test.registerAsyncHelper('keyPress', function (app, attributes, element) {\n      return keyEvent(app, attributes, 'keypress', element);\n    });\n\n    Ember.Test.registerAsyncHelper('mouseDown', function (app, attributes, element) {\n      return keyEvent(app, attributes, 'mousedown', element);\n    });\n\n    Ember.Test.registerAsyncHelper('mouseUp', function (app, attributes, element) {\n      return keyEvent(app, attributes, 'mouseup', element);\n    });\n\n    Ember.Test.registerAsyncHelper('touchStart', function (app, attributes, element) {\n      return keyEvent(app, attributes, 'touchstart', element);\n    });\n\n    Ember.Test.registerAsyncHelper('touchEnd', function (app, attributes, element) {\n      return keyEvent(app, attributes, 'touchend', element);\n    });\n  };\n\n  const keyEvent = function keyEvent(app, attributes, type, element) {\n    const event = (attributes || '').split('+').reduce((event, attribute) => {\n      if (_modifiersArray.default.indexOf(attribute) > -1) {\n        attribute = attribute === 'cmd' ? (0, _getCmdKey.default)() : attribute;\n        event[`${attribute}Key`] = true;\n      } else if (_mouseButtonsArray.default.indexOf(attribute) > -1) {\n        event.button = (0, _emberKeyboard.getMouseCode)(attribute);\n      } else {\n        event.keyCode = (0, _emberKeyboard.getKeyCode)(attribute);\n      }\n\n      return event;\n    }, {});\n\n    return app.testHelpers.triggerEvent(element || document.body, type, event);\n  };\n});","define('faith-promise-fire-tv-app/tests/integration/components/app-header/component-test', ['qunit', 'ember-qunit', '@ember/test-helpers'], function (_qunit, _emberQunit, _testHelpers) {\n  'use strict';\n\n  (0, _qunit.module)('Integration | Component | app-header', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"ThITRgmk\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"app-header\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), '');\n\n      // Template block usage:\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"3GTSp1mS\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"app-header\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define('faith-promise-fire-tv-app/tests/integration/components/home-screen/component-test', ['qunit', 'ember-qunit', '@ember/test-helpers'], function (_qunit, _emberQunit, _testHelpers) {\n  'use strict';\n\n  (0, _qunit.module)('Integration | Component | home-screen', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    (0, _qunit.test)('it renders', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"sokBa8Sk\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"home-screen\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), '');\n    });\n  });\n});","define('faith-promise-fire-tv-app/tests/integration/components/live-stream-button/component-test', ['qunit', 'ember-qunit', '@ember/test-helpers'], function (_qunit, _emberQunit, _testHelpers) {\n  'use strict';\n\n  (0, _qunit.module)('Integration | Component | live-stream-button', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    (0, _qunit.test)('it renders', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"YGg3nwyg\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"live-stream-button\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), '');\n    });\n  });\n});","define('faith-promise-fire-tv-app/tests/integration/components/series-carousel/component-test', ['qunit', 'ember-qunit', '@ember/test-helpers'], function (_qunit, _emberQunit, _testHelpers) {\n  'use strict';\n\n  (0, _qunit.module)('Integration | Component | series-carousel', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    (0, _qunit.test)('it renders', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"tdxIvW10\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"series-carousel\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), '');\n    });\n  });\n});","define('faith-promise-fire-tv-app/tests/integration/components/series-screen/component-test', ['qunit', 'ember-qunit', '@ember/test-helpers'], function (_qunit, _emberQunit, _testHelpers) {\n  'use strict';\n\n  (0, _qunit.module)('Integration | Component | series-screen', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"SKBmm38Q\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"series-screen\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), '');\n\n      // Template block usage:\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"3w3TvErm\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"series-screen\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define('faith-promise-fire-tv-app/tests/integration/components/series-screen/episode/component-test', ['qunit', 'ember-qunit', '@ember/test-helpers'], function (_qunit, _emberQunit, _testHelpers) {\n  'use strict';\n\n  (0, _qunit.module)('Integration | Component | series-screen/episode', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"qnzfB+kR\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"series-screen/episode\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), '');\n\n      // Template block usage:\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"IG5jtJ+b\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"series-screen/episode\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define('faith-promise-fire-tv-app/tests/integration/components/thumbnail-image/component-test', ['qunit', 'ember-qunit', '@ember/test-helpers'], function (_qunit, _emberQunit, _testHelpers) {\n  'use strict';\n\n  (0, _qunit.module)('Integration | Component | thumbnail image', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    (0, _qunit.test)('it renders', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"296u7fbj\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"thumbnail-image\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), '');\n    });\n  });\n});","define('faith-promise-fire-tv-app/tests/integration/components/video-player/component-test', ['qunit', 'ember-qunit', '@ember/test-helpers'], function (_qunit, _emberQunit, _testHelpers) {\n  'use strict';\n\n  (0, _qunit.module)('Integration | Component | video-player', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"ptq9s9ti\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"video-player\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), '');\n\n      // Template block usage:\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"inYmbIJu\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"video-player\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define('faith-promise-fire-tv-app/tests/integration/components/video-player/info-display/component-test', ['qunit', 'ember-qunit', '@ember/test-helpers'], function (_qunit, _emberQunit, _testHelpers) {\n  'use strict';\n\n  (0, _qunit.module)('Integration | Component | video-player/info-display', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    (0, _qunit.test)('it renders', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"Irw9hWyM\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"video-player/info-display\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), '');\n    });\n  });\n});","define('faith-promise-fire-tv-app/tests/integration/components/video-player/next-video-countdown/component-test', ['qunit', 'ember-qunit', '@ember/test-helpers'], function (_qunit, _emberQunit, _testHelpers) {\n  'use strict';\n\n  (0, _qunit.module)('Integration | Component | video-player/next-video-countdown', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"2mXIqr1d\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"video-player/next-video-countdown\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), '');\n\n      // Template block usage:\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"P15/K0m+\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"video-player/next-video-countdown\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define('faith-promise-fire-tv-app/tests/integration/components/video-player/video/component-test', ['qunit', 'ember-qunit', '@ember/test-helpers'], function (_qunit, _emberQunit, _testHelpers) {\n  'use strict';\n\n  (0, _qunit.module)('Integration | Component | video-player/video', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"68YSPcBa\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"video-player/video\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), '');\n\n      // Template block usage:\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"SuigNwEV\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"video-player/video\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define('faith-promise-fire-tv-app/tests/integration/helpers/add-test', ['qunit', 'ember-qunit', '@ember/test-helpers'], function (_qunit, _emberQunit, _testHelpers) {\n  'use strict';\n\n  (0, _qunit.module)('Integration | Helper | add', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    (0, _qunit.test)('shows added value', async function (assert) {\n      this.set('inputValue', '1234');\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"w5Z3a6oo\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"add\\\",[[20,[\\\"inputValue\\\"]],2],null],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), '1235');\n    });\n  });\n});","define('faith-promise-fire-tv-app/tests/test-helper', ['faith-promise-fire-tv-app/app', 'faith-promise-fire-tv-app/config/environment', '@ember/test-helpers', 'ember-qunit'], function (_app, _environment, _testHelpers, _emberQunit) {\n  'use strict';\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n\n  (0, _emberQunit.start)();\n});","define('faith-promise-fire-tv-app/tests/tests.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('integration/components/app-header/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/app-header/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/home-screen/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/home-screen/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/live-stream-button/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/live-stream-button/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/series-carousel/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/series-carousel/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/series-screen/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/series-screen/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/series-screen/episode/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/series-screen/episode/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/thumbnail-image/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/thumbnail-image/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/video-player/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/video-player/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/video-player/info-display/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/video-player/info-display/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/video-player/next-video-countdown/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/video-player/next-video-countdown/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/video-player/video/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/video-player/video/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/helpers/add-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/helpers/add-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/home-screen/service-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/home-screen/service-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/index/controller-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/index/controller-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/index/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/index/route-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/initializers/array-next-item-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/initializers/array-next-item-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/play/live/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/play/live/route-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/play/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/play/route-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/play/series/episode/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/play/series/episode/route-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/play/series/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/play/series/route-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/series/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/series/route-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/shoveler/service-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/shoveler/service-test.js should pass ESLint\\n\\n');\n  });\n});","define('faith-promise-fire-tv-app/tests/unit/home-screen/service-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Service | home-screen', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let service = this.owner.lookup('service:home-screen');\n      assert.ok(service);\n    });\n  });\n});","define('faith-promise-fire-tv-app/tests/unit/index/controller-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Controller | index', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:index');\n      assert.ok(controller);\n    });\n  });\n});","define('faith-promise-fire-tv-app/tests/unit/index/route-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | index', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:index');\n      assert.ok(route);\n    });\n  });\n});","define('faith-promise-fire-tv-app/tests/unit/initializers/array-next-item-test', ['faith-promise-fire-tv-app/initializers/array-next-item', 'qunit', 'ember-qunit', 'faith-promise-fire-tv-app/tests/helpers/destroy-app'], function (_arrayNextItem, _qunit, _emberQunit, _destroyApp) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Initializer | array-next-item', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    hooks.beforeEach(function () {\n      this.TestApplication = Ember.Application.extend();\n      this.TestApplication.initializer({\n        name: 'initializer under test',\n        initialize: _arrayNextItem.initialize\n      });\n\n      this.application = this.TestApplication.create({ autoboot: false });\n    });\n\n    hooks.afterEach(function () {\n      (0, _destroyApp.default)(this.application);\n    });\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it works', async function (assert) {\n      await this.application.boot();\n\n      assert.ok(true);\n    });\n  });\n});","define('faith-promise-fire-tv-app/tests/unit/play/live/route-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | play/live', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:play/live');\n      assert.ok(route);\n    });\n  });\n});","define('faith-promise-fire-tv-app/tests/unit/play/route-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | play', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:play');\n      assert.ok(route);\n    });\n  });\n});","define('faith-promise-fire-tv-app/tests/unit/play/series/episode/route-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | play/series/episode', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:play/series/episode');\n      assert.ok(route);\n    });\n  });\n});","define('faith-promise-fire-tv-app/tests/unit/play/series/route-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | play/series', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:play/series');\n      assert.ok(route);\n    });\n  });\n});","define('faith-promise-fire-tv-app/tests/unit/series/route-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | series', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:series');\n      assert.ok(route);\n    });\n  });\n});","define('faith-promise-fire-tv-app/tests/unit/shoveler/service-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Service | shoveler', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let service = this.owner.lookup('service:shoveler');\n      assert.ok(service);\n    });\n  });\n});","define('faith-promise-fire-tv-app/config/environment', [], function() {\n  var prefix = 'faith-promise-fire-tv-app';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('faith-promise-fire-tv-app/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjtHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}